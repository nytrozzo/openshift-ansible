---
- name: Update node-config to prepare for bootstrapping
  yedit:
    src: "{{ openshift.common.config_base }}/node/node-config.yaml"
    edits:
    - key: servingInfo.certFile
      value: ""
    - key: servingInfo.keyFile
      value: ""
    - key: kubeletArguments.bootstrap-kubeconfig
      value:
      - "{{ openshift.common.config_base }}/node/bootstrap.kubeconfig"
    - key: kubeletArguments.rotate-certificates
      value:
      - "true"
    - key: kubeletArguments.cert-dir
      value:
      - "{{ openshift.common.config_base }}/node/certificates"
    - key: kubeletArguments.feature-gates
      value:
      - RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true

- name: Check for existing node-config.yaml
  stat:
    path: "{{ openshift.common.config_base }}/node/node-config.yaml"
  register: existing_node_config

- name: Copy existing configuration to bootstrap configuration
  copy:
    remote_src: true
    src: "{{ openshift.common.config_base }}/node/node-config.yaml"
    dest: "{{ openshift.common.config_base }}/node/bootstrap-node-config.yaml"
    force: no
    owner: root
    group: root
    mode: 0600
  when: existing_node_config.stat.exists

- name: Find existing credentials
  find:
    paths:
    - "{{ openshift.common.config_base }}/node"
    patterns:
    - system*.kubeconfig
  register: system_kubeconfigs

- name: Copy existing credentials to bootstrap credentials
  copy:
    remote_src: true
    src: "{{ item }}"
    dest: "{{ openshift.common.config_base }}/node/bootstrap.kubeconfig"
    force: no
    owner: root
    group: root
    mode: 0600
  with_items: "{{ system_kubeconfigs.files | default([]) | map(attribute='path') | list + [openshift.common.config_base+'/node/node.kubeconfig'] }}"

- name: Remove non-bootstrap configuration
  file:
    path: "{{ item }}"
    state: absent
  with_items:
  - "{{ openshift.common.config_base }}/node/node.kubeconfig"
  - "{{ openshift.common.config_base }}/node/node-config.yaml"

- name: Use the admin.kubeconfig for the kubelet bootstrap identity
  copy:
    remote_src: true
    src: "{{ openshift.common.config_base }}/master/admin.kubeconfig"
    dest: "{{ openshift.common.config_base }}/node/bootstrap.kubeconfig"
    force: yes
    owner: root
    group: root
    mode: 0600
  when: inventory_hostname in groups.oo_masters_to_config

- name: Remove previous bootstrap certificates
  file:
    path: "{{ openshift.common.config_base }}/node/certificates"
    state: absent

- name: Determine if node already has a dynamic config group
  lineinfile:
    dest: "/etc/sysconfig/{{ openshift_service_type }}-node"
    line: "BOOTSTRAP_CONFIG_NAME="
    regexp: "^BOOTSTRAP_CONFIG_NAME=.+"
  check_mode: yes
  register: existing

- name: Update the sysconfig to group "{{ r_node_dynamic_config_name }}"
  lineinfile:
    dest: "/etc/sysconfig/{{ openshift_service_type }}-node"
    line: "BOOTSTRAP_CONFIG_NAME={{ r_node_dynamic_config_name }}"
    regexp: "^BOOTSTRAP_CONFIG_NAME=.*"
  when: r_node_dynamic_config_force|default(False) or not(existing|changed)

- name: Set up node-config.yml if dynamic configuration is off
  copy:
    remote_src: true
    src: "{{ openshift.common.config_base }}/node/bootstrap-node-config.yaml"
    dest: "{{ openshift.common.config_base }}/node/node-config.yaml"
    force: no
    owner: root
    group: root
    mode: 0600
  when: r_node_dynamic_config_name|length == 0
